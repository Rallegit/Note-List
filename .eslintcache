[{"C:\\Users\\antho\\Desktop\\ReactJS\\notes\\src\\index.js":"1","C:\\Users\\antho\\Desktop\\ReactJS\\notes\\src\\App.js":"2","C:\\Users\\antho\\Desktop\\ReactJS\\notes\\src\\utils\\noteHelpers.js":"3","C:\\Users\\antho\\Desktop\\ReactJS\\notes\\src\\components\\List.js":"4","C:\\Users\\antho\\Desktop\\ReactJS\\notes\\src\\Tryit\\Clock.js":"5","C:\\Users\\antho\\Desktop\\ReactJS\\notes\\src\\components\\Form.js":"6"},{"size":193,"mtime":1606913386816,"results":"7","hashOfConfig":"8"},{"size":1777,"mtime":1607848044686,"results":"9","hashOfConfig":"8"},{"size":1315,"mtime":1607851911984,"results":"10","hashOfConfig":"8"},{"size":570,"mtime":1607849009506,"results":"11","hashOfConfig":"8"},{"size":408,"mtime":1607441433586,"results":"12","hashOfConfig":"8"},{"size":2616,"mtime":1607850613861,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"186nawv",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"C:\\Users\\antho\\Desktop\\ReactJS\\notes\\src\\index.js",[],["29","30"],"C:\\Users\\antho\\Desktop\\ReactJS\\notes\\src\\App.js",[],"C:\\Users\\antho\\Desktop\\ReactJS\\notes\\src\\utils\\noteHelpers.js",["31"],"function initializeNotes() {\r\n  localStorage.setItem('notes', JSON.stringify([]))\r\n  return []\r\n}\r\nexport function getNotes() {\r\n  const notes = localStorage.getItem('notes')\r\n  if (!notes) {\r\n    notes = initializeNotes()\r\n  }\r\n  const parsedNotes = JSON.parse(notes)\r\n  return parsedNotes\r\n}\r\n\r\nexport function createNote(title, body) {\r\n  const notes = getNotes()\r\n  const newNote = {\r\n    id: Date.now(),\r\n    title,\r\n    body,\r\n  }\r\n  notes.unshift(newNote)\r\n  const jsonNoteArray = JSON.stringify(notes)\r\n  localStorage.setItem('notes', jsonNoteArray)\r\n}\r\nexport function getNote(id) {\r\n  const notes = getNotes()\r\n  return notes.find((note) => note.id === id)\r\n}\r\nexport function updateNote(id, title, body) {\r\n  const notes = getNotes()\r\n  const noteUpdate = notes.findIndex((note) => note.id === id)\r\n  const note = {\r\n    id: id,\r\n    title: title,\r\n    body: body,\r\n  }\r\n  notes.splice(noteUpdate, 1)\r\n  notes.splice(0, 0, note)\r\n  const jsonNoteArray = JSON.stringify(notes)\r\n  localStorage.setItem('notes', jsonNoteArray)\r\n}\r\nexport function deleteNote(id) {\r\n  const notes = getNotes()\r\n  const noteDelete = notes.findIndex((note) => note.id === id)\r\n  if (noteDelete >= 0) notes.splice(noteDelete, 1)\r\n  const jsonNoteArray = JSON.stringify(notes)\r\n  localStorage.setItem('notes', jsonNoteArray)\r\n}\r\n","C:\\Users\\antho\\Desktop\\ReactJS\\notes\\src\\components\\List.js",[],"C:\\Users\\antho\\Desktop\\ReactJS\\notes\\src\\Tryit\\Clock.js",[],"C:\\Users\\antho\\Desktop\\ReactJS\\notes\\src\\components\\Form.js",["32"],"import React, {useState, useEffect} from 'react'\r\nimport BootstrapForm from 'react-bootstrap/Form'\r\nimport {createNote, updateNote, deleteNote} from '../utils/noteHelpers'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Alert from 'react-bootstrap/Alert'\r\n\r\nconst STATUS_INITIAL_VALUE = ''\r\n\r\nexport default function Form({selectedNote, refreshList, setSelectedNote}) {\r\n  const [title, setTitle] = useState('')\r\n  const [body, setBody] = useState('')\r\n  const [status, setStatus] = useState(STATUS_INITIAL_VALUE)\r\n  const [variant, setVariant] = useState('')\r\n\r\n  useEffect(() => {\r\n    if (selectedNote) return setTitle(selectedNote.title)\r\n    setTitle('')\r\n  }, [selectedNote])\r\n\r\n  useEffect(() => {\r\n    if (selectedNote) return setBody(selectedNote.body)\r\n    setBody('')\r\n  }, [selectedNote])\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => setStatus(STATUS_INITIAL_VALUE), 4000)\r\n  }, [status])\r\n\r\n  useEffect(() => {\r\n    if (selectedNote) return setVariant('')\r\n  }, [variant])\r\n\r\n  const onChangeT = (e) => setTitle(e.target.value)\r\n  const onChangeB = (e) => setBody(e.target.value)\r\n\r\n  const onSave = (e) => {\r\n    e.preventDefault()\r\n    setTitle('')\r\n    setBody('')\r\n    setStatus('SAVED')\r\n    setVariant('success')\r\n    if (selectedNote) {\r\n      updateNote(selectedNote.id, title, body)\r\n      return refreshList()\r\n    }\r\n    createNote(title, body)\r\n    refreshList()\r\n  }\r\n  const onDelete = (e) => {\r\n    e.preventDefault()\r\n    if (!selectedNote) return\r\n    const {id} = selectedNote\r\n    deleteNote(id)\r\n    refreshList()\r\n    setTitle('')\r\n    setBody('')\r\n    setStatus('DELETED')\r\n    setVariant('danger')\r\n  }\r\n\r\n  return (\r\n    <BootstrapForm>\r\n      <BootstrapForm.Group>\r\n        <br />\r\n        <BootstrapForm.Label>Note Title:</BootstrapForm.Label>\r\n        <BootstrapForm.Control type=\"text\" value={title} onChange={onChangeT} />\r\n        <BootstrapForm.Label>Note Body:</BootstrapForm.Label>\r\n        <BootstrapForm.Control\r\n          value={body}\r\n          onChange={onChangeB}\r\n          as=\"textarea\"\r\n          size=\"sm\"\r\n          type=\"text\"\r\n          rows={3}\r\n        />\r\n      </BootstrapForm.Group>\r\n      <Button size=\"lg\" variant=\"success\" onClick={onSave}>\r\n        Save\r\n      </Button>\r\n      {selectedNote && (\r\n        <Button size=\"lg\" style={styles.btnpadding} variant=\"danger\" onClick={onDelete}>\r\n          Delete\r\n        </Button>\r\n      )}\r\n      <br />\r\n      {status && <Alert variant={variant}>{status}</Alert>}\r\n    </BootstrapForm>\r\n  )\r\n}\r\nconst styles = {\r\n  btnWidth: {\r\n    width: 200,\r\n  },\r\n  btnpadding: {\r\n    marginLeft: 10,\r\n  },\r\n}\r\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":8,"column":5,"nodeType":"39","messageId":"40","endLine":8,"endColumn":10},{"ruleId":"41","severity":1,"message":"42","line":31,"column":6,"nodeType":"43","endLine":31,"endColumn":15,"suggestions":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-const-assign","'notes' is constant.","Identifier","const","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedNote'. Either include it or remove the dependency array.","ArrayExpression",["47"],"no-global-assign","no-unsafe-negation",{"desc":"48","fix":"49"},"Update the dependencies array to be: [selectedNote, variant]",{"range":"50","text":"51"},[980,989],"[selectedNote, variant]"]